/**
 * Luna API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LunaApi);
  }
}(this, function(expect, LunaApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LunaApi.TenantApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TenantApi', function() {
    describe('tenantCreate', function() {
      it('should call tenantCreate successfully', function(done) {
        //uncomment below and update the code to test tenantCreate
        //instance.tenantCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantDelete', function() {
      it('should call tenantDelete successfully', function(done) {
        //uncomment below and update the code to test tenantDelete
        //instance.tenantDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantDeleteDefaultConnectionString', function() {
      it('should call tenantDeleteDefaultConnectionString successfully', function(done) {
        //uncomment below and update the code to test tenantDeleteDefaultConnectionString
        //instance.tenantDeleteDefaultConnectionString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantGet', function() {
      it('should call tenantGet successfully', function(done) {
        //uncomment below and update the code to test tenantGet
        //instance.tenantGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantGetDefaultConnectionString', function() {
      it('should call tenantGetDefaultConnectionString successfully', function(done) {
        //uncomment below and update the code to test tenantGetDefaultConnectionString
        //instance.tenantGetDefaultConnectionString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantGetList', function() {
      it('should call tenantGetList successfully', function(done) {
        //uncomment below and update the code to test tenantGetList
        //instance.tenantGetList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantUpdate', function() {
      it('should call tenantUpdate successfully', function(done) {
        //uncomment below and update the code to test tenantUpdate
        //instance.tenantUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tenantUpdateDefaultConnectionString', function() {
      it('should call tenantUpdateDefaultConnectionString successfully', function(done) {
        //uncomment below and update the code to test tenantUpdateDefaultConnectionString
        //instance.tenantUpdateDefaultConnectionString(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
