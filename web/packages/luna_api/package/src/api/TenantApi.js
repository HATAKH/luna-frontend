/**
 * Luna API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PagedResultDtoOfTenantDto from '../model/PagedResultDtoOfTenantDto';
import RemoteServiceErrorResponse from '../model/RemoteServiceErrorResponse';
import TenantCreateDto from '../model/TenantCreateDto';
import TenantDto from '../model/TenantDto';
import TenantUpdateDto from '../model/TenantUpdateDto';

/**
* Tenant service.
* @module api/TenantApi
* @version v1
*/
export default class TenantApi {

    /**
    * Constructs a new TenantApi. 
    * @alias module:api/TenantApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenantCreate operation.
     * @callback module:api/TenantApi~tenantCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantCreateDto} opts.tenantCreateDto 
     * @param {module:api/TenantApi~tenantCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantDto}
     */
    tenantCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['tenantCreateDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TenantDto;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantDelete operation.
     * @callback module:api/TenantApi~tenantDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TenantApi~tenantDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenantDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantDeleteDefaultConnectionString operation.
     * @callback module:api/TenantApi~tenantDeleteDefaultConnectionStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TenantApi~tenantDeleteDefaultConnectionStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenantDeleteDefaultConnectionString(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantDeleteDefaultConnectionString");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}/default-connection-string', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantGet operation.
     * @callback module:api/TenantApi~tenantGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TenantApi~tenantGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantDto}
     */
    tenantGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TenantDto;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantGetDefaultConnectionString operation.
     * @callback module:api/TenantApi~tenantGetDefaultConnectionStringCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/TenantApi~tenantGetDefaultConnectionStringCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    tenantGetDefaultConnectionString(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantGetDefaultConnectionString");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}/default-connection-string', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantGetList operation.
     * @callback module:api/TenantApi~tenantGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultDtoOfTenantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {String} opts.sorting 
     * @param {Number} opts.skipCount 
     * @param {Number} opts.maxResultCount 
     * @param {module:api/TenantApi~tenantGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultDtoOfTenantDto}
     */
    tenantGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Filter': opts['filter'],
        'Sorting': opts['sorting'],
        'SkipCount': opts['skipCount'],
        'MaxResultCount': opts['maxResultCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PagedResultDtoOfTenantDto;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantUpdate operation.
     * @callback module:api/TenantApi~tenantUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TenantDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/TenantUpdateDto} opts.tenantUpdateDto 
     * @param {module:api/TenantApi~tenantUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TenantDto}
     */
    tenantUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['tenantUpdateDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = TenantDto;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantUpdateDefaultConnectionString operation.
     * @callback module:api/TenantApi~tenantUpdateDefaultConnectionStringCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} opts.defaultConnectionString 
     * @param {module:api/TenantApi~tenantUpdateDefaultConnectionStringCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenantUpdateDefaultConnectionString(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling tenantUpdateDefaultConnectionString");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'defaultConnectionString': opts['defaultConnectionString']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/multi-tenancy/tenants/{id}/default-connection-string', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
