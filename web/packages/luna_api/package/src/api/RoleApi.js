/**
 * Luna API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdentityRoleCreateDto from '../model/IdentityRoleCreateDto';
import IdentityRoleDto from '../model/IdentityRoleDto';
import IdentityRoleUpdateDto from '../model/IdentityRoleUpdateDto';
import ListResultDtoOfIdentityRoleDto from '../model/ListResultDtoOfIdentityRoleDto';
import PagedResultDtoOfIdentityRoleDto from '../model/PagedResultDtoOfIdentityRoleDto';
import RemoteServiceErrorResponse from '../model/RemoteServiceErrorResponse';

/**
* Role service.
* @module api/RoleApi
* @version v1
*/
export default class RoleApi {

    /**
    * Constructs a new RoleApi. 
    * @alias module:api/RoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the roleCreate operation.
     * @callback module:api/RoleApi~roleCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityRoleCreateDto} opts.identityRoleCreateDto 
     * @param {module:api/RoleApi~roleCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityRoleDto}
     */
    roleCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['identityRoleCreateDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IdentityRoleDto;
      return this.apiClient.callApi(
        '/api/identity/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleDelete operation.
     * @callback module:api/RoleApi~roleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/RoleApi~roleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    roleDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/identity/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleGet operation.
     * @callback module:api/RoleApi~roleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/RoleApi~roleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityRoleDto}
     */
    roleGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IdentityRoleDto;
      return this.apiClient.callApi(
        '/api/identity/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleGetAllList operation.
     * @callback module:api/RoleApi~roleGetAllListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResultDtoOfIdentityRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/RoleApi~roleGetAllListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResultDtoOfIdentityRoleDto}
     */
    roleGetAllList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ListResultDtoOfIdentityRoleDto;
      return this.apiClient.callApi(
        '/api/identity/roles/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleGetList operation.
     * @callback module:api/RoleApi~roleGetListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResultDtoOfIdentityRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {String} opts.sorting 
     * @param {Number} opts.skipCount 
     * @param {Number} opts.maxResultCount 
     * @param {module:api/RoleApi~roleGetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResultDtoOfIdentityRoleDto}
     */
    roleGetList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Filter': opts['filter'],
        'Sorting': opts['sorting'],
        'SkipCount': opts['skipCount'],
        'MaxResultCount': opts['maxResultCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = PagedResultDtoOfIdentityRoleDto;
      return this.apiClient.callApi(
        '/api/identity/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleUpdate operation.
     * @callback module:api/RoleApi~roleUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityRoleDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityRoleUpdateDto} opts.identityRoleUpdateDto 
     * @param {module:api/RoleApi~roleUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityRoleDto}
     */
    roleUpdate(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['identityRoleUpdateDto'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleUpdate");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = IdentityRoleDto;
      return this.apiClient.callApi(
        '/api/identity/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
