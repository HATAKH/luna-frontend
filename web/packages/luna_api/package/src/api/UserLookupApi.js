/**
 * Luna API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListResultDtoOfUserData from '../model/ListResultDtoOfUserData';
import RemoteServiceErrorResponse from '../model/RemoteServiceErrorResponse';
import UserData from '../model/UserData';

/**
* UserLookup service.
* @module api/UserLookupApi
* @version v1
*/
export default class UserLookupApi {

    /**
    * Constructs a new UserLookupApi. 
    * @alias module:api/UserLookupApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the userLookupFindById operation.
     * @callback module:api/UserLookupApi~userLookupFindByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/UserLookupApi~userLookupFindByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserData}
     */
    userLookupFindById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userLookupFindById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserData;
      return this.apiClient.callApi(
        '/api/identity/users/lookup/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLookupFindByUserName operation.
     * @callback module:api/UserLookupApi~userLookupFindByUserNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userName 
     * @param {module:api/UserLookupApi~userLookupFindByUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserData}
     */
    userLookupFindByUserName(userName, callback) {
      let postBody = null;
      // verify the required parameter 'userName' is set
      if (userName === undefined || userName === null) {
        throw new Error("Missing the required parameter 'userName' when calling userLookupFindByUserName");
      }

      let pathParams = {
        'userName': userName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UserData;
      return this.apiClient.callApi(
        '/api/identity/users/lookup/by-username/{userName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLookupGetCount operation.
     * @callback module:api/UserLookupApi~userLookupGetCountCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {module:api/UserLookupApi~userLookupGetCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    userLookupGetCount(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/identity/users/lookup/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userLookupSearch operation.
     * @callback module:api/UserLookupApi~userLookupSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResultDtoOfUserData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter 
     * @param {String} opts.sorting 
     * @param {Number} opts.skipCount 
     * @param {Number} opts.maxResultCount 
     * @param {module:api/UserLookupApi~userLookupSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResultDtoOfUserData}
     */
    userLookupSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Filter': opts['filter'],
        'Sorting': opts['sorting'],
        'SkipCount': opts['skipCount'],
        'MaxResultCount': opts['maxResultCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ListResultDtoOfUserData;
      return this.apiClient.callApi(
        '/api/identity/users/lookup/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
